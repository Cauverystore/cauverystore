import React, { useEffect, useState } from "react";
import { supabase } from "@/lib/supabaseClient";
import { useAuth } from "@/components/AuthProvider";
import toast from "react-hot-toast";
import { sendInvoiceEmail } from "@/api/sendInvoiceEmail";

export default function MyInvoicesPage() {
  const { user } = useAuth();
  const [invoices, setInvoices] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [resendingId, setResendingId] = useState<string | null>(null);

  useEffect(() => {
    if (user?.id) fetchInvoices();
  }, [user?.id]);

  const fetchInvoices = async () => {
    setLoading(true);
    const { data, error } = await supabase
      .from("orders")
      .select("id, created_at, invoice_url, invoice_filename")
      .eq("user_id", user?.id)
      .not("invoice_url", "is", null)
      .order("created_at", { ascending: false });

    if (error) {
      toast.error("Failed to fetch invoices");
    } else {
      setInvoices(data || []);
    }
    setLoading(false);
  };

  const handleResend = async (invoice: any) => {
    setResendingId(invoice.id);
    const sent = await sendInvoiceEmail(user?.email, invoice.invoice_url, invoice.id);
    if (sent) toast.success("Invoice re-emailed successfully");
    else toast.error("Failed to resend invoice email");
    setResendingId(null);
  };

  const filtered = invoices.filter((i) =>
    i.invoice_filename?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    i.id.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="max-w-4xl mx-auto p-4">
      <h2 className="text-2xl font-bold text-green-700 mb-4">My Invoices</h2>

      <input
        type="text"
        placeholder="Search by filename or Order ID"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="border px-3 py-2 rounded w-full mb-4"
      />

      {loading ? (
        <p>Loading invoices...</p>
      ) : filtered.length === 0 ? (
        <p>No invoices found.</p>
      ) : (
        <ul className="space-y-4">
          {filtered.map((invoice) => (
            <li
              key={invoice.id}
              className="border p-4 rounded bg-white shadow flex flex-col md:flex-row md:items-center md:justify-between"
            >
              <div>
                <p className="text-sm text-gray-500">Order ID: {invoice.id}</p>
                <p className="text-sm">Date: {new Date(invoice.created_at).toLocaleDateString()}</p>
                <p className="text-sm font-medium">{invoice.invoice_filename}</p>
              </div>
              <div className="flex gap-3 mt-2 md:mt-0">
                <a
                  href={invoice.invoice_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
                >
                  Download
                </a>
                <button
                  onClick={() => handleResend(invoice)}
                  disabled={resendingId === invoice.id}
                  className="text-sm text-indigo-600 hover:underline disabled:opacity-60"
                >
                  {resendingId === invoice.id ? "Sending..." : "Resend Email"}
                </button>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
